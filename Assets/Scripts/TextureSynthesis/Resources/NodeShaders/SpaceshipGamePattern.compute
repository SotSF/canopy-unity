#include "HSV.compute"

#pragma kernel GameBoardKernel
#pragma kernel FluidVelocityKernel

#define PI 3.14159265f

struct Player {
    float2 position;
    float2 velocity;
    float4 color;
};

RWTexture2D<float4> GameboardTex;
RWTexture2D<float4> FluidVelocityTex;
RWStructuredBuffer<Player> PlayerBuffer;

uint width;
uint height;

uint numPlayers;
float playerSize;

float maxSpeed;
float innerRingDistance;
float outerRingDistance;

SamplerState SmpPointClamp;

[numthreads(25, 16, 1)]
void GameBoardKernel(uint3 id : SV_DispatchThreadID)
{
    // Compute distance from current pixel operating on (aka id)
    // and player centers, if < player size, fill with player color
    for (uint i = 0; i < numPlayers; i++) {
        Player p = PlayerBuffer[i];
        float distFromPlayer = distance(id.xy, p.position);
        //GameboardTex[id.xy] = float4(0, 0, 0, 1);
        //if (distance(id.xy, float2(width, height) / 2) < innerRingDistance) {
        //    GameboardTex[id.xy] = float4(0.2, 0.2, 0.2, 1);
        //}
        //if (distance(id.xy, float2(width, height) / 2) > outerRingDistance) {
        //    GameboardTex[id.yx] = float4(0.2, 0.2, 0.2, 1);
        //}
        if (distFromPlayer < playerSize) {
            GameboardTex[id.xy] = p.color;
        }
    }
}

[numthreads(25, 16, 1)]
void FluidVelocityKernel(uint3 id : SV_DispatchThreadID)
{
    // Compute distance from current pixel operating on (aka id)
    // and player centers, if < player size, fill with player color
    for (uint i = 0; i < numPlayers; i++) {
        Player p = PlayerBuffer[i];
        float distFromPlayer = distance(id.xy, p.position);
        if (distFromPlayer < playerSize) {
            float angle = (atan2(p.velocity.y, p.velocity.x) + 3.14159) / (2 * 3.14159);
            float speed = length(p.velocity);
            float3 color = HSVtoRGB(float3(angle, 1, (speed / maxSpeed)));
            FluidVelocityTex[id.xy] = float4(color.r, color.g, color.b, 1);
        }
    }
}