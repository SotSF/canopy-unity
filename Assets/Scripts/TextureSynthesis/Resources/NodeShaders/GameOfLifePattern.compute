#pragma kernel GameOfLife

#define ALIVE_THRESHOLD 0.5

Texture2D<float4> gameState;
RWTexture2D<float4> outputTex;

uint width;
uint height;

SamplerState smpRepeatPoint;

int gameOfLifeSample(int2 id, int2 offset)
{
    return gameState[id+offset].x;
}


// Conway's game of life.
// [DEAD] 1. Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.
// [LIVE] 2. Any live cell with two or three live neighbours lives on to the next generation.
// [DEAD] 3. Any live cell with more than three live neighbours dies, as if by overpopulation.
// [LIVE] 4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
[numthreads(25, 16, 1)]
void GameOfLife(uint3 id : SV_DispatchThreadID)
{
    int neighbors = 0;
    // above
    neighbors += gameOfLifeSample(id.xy, int2(-1, -1));
    neighbors += gameOfLifeSample(id.xy, int2(0, -1));
    neighbors += gameOfLifeSample(id.xy, int2(1, -1));

    // same level
    neighbors += gameOfLifeSample(id.xy, int2(-1, 0));
    neighbors += gameOfLifeSample(id.xy, int2(1, 0));

    // below
    neighbors += gameOfLifeSample(id.xy, int2(-1, 1));
    neighbors += gameOfLifeSample(id.xy, int2(0, 1));
    neighbors += gameOfLifeSample(id.xy, int2(1, 1));

    bool alive = gameState[id.xy].x >= 0.9;
    bool stable = neighbors >= 2 && neighbors <= 3;
    bool repro = neighbors == 3;
    float val = alive ? (stable ? 1 : 0) : (repro ? 1 : 0);
    outputTex[id.xy] = float4(val, val, val, 1);
}
