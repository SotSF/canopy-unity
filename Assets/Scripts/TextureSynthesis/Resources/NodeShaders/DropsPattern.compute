#include "Assets/Scripts/TextureSynthesis/Resources/NodeShaders/HSV.compute"

#pragma kernel PatternKernel

int2 center;
float radius;
float3 hsv;
bool fill;

RWTexture2D<float4> outputTex;

bool onCircle(uint3 id : SV_DispatchThreadID) {
    float dist = distance(id, center);
    return dist >= radius - 2 && dist <= radius + 2;
}

bool withinCircle(uint3 id : SV_DispatchThreadID) {
    float dist = distance(id, center);
    return dist <= radius;
}

void fade(uint3 id : SV_DispatchThreadID) {
    float4 c = outputTex[id.xy];
    float3 rgb = float3(c.x, c.y, c.z);
    float3 hsv = RGBtoHSV(rgb);
    float v = hsv.z - 0.02;
    if (v < 0) { v = 0; }
    float3 res = HSVtoRGB(float3(hsv.x, hsv.y, v));
	float alpha = c.a - 0.02;
    outputTex[id.xy] = float4(res.x, res.y, res.z, alpha);
}


[numthreads(16, 16, 1)]
void PatternKernel(uint3 id : SV_DispatchThreadID)
{
    bool draw = fill ? withinCircle(id) : onCircle(id);
    if (draw) {
        float3 rgb = HSVtoRGB(hsv);
        outputTex[id.xy] = float4(rgb.r, rgb.g, rgb.b, 1);
    }
    else {
        fade(id);
    }
}
