#pragma kernel CSMain

Texture2D<float4> InputTex;
RWTexture2D<float4> OutputTex;

uint width;
uint height;

float2 rotate(in float2 xy, in float2 center, in float theta)
{
    float r = distance(center, xy);
    float startAngle = atan2(xy.y - center.y, xy.x - center.x);
    float newX = center.x + r * cos(theta + startAngle);
    float newY = center.y + r * sin(theta + startAngle);
    return float2(newX, newY);
}

float2 worldspace(in uint2 pixel, in float2 dimensions) {
    // go from pixelSpace to width-normalized world space
    float pi = 3.14159265;
    float2 center = float2(0, 0);
    float apexRadius = 0.332f;
    float stripLength = 2.5f;
    float normalizedDimension = dimensions.x > dimensions.y ? dimensions.y : dimensions.x;
    float normalizedX = ((stripLength*pixel.x / (width*1.0f)) + apexRadius) / (stripLength + apexRadius);
    float theta = 2 * pi * (pixel.y / (height*1.0f)) / 2;
    return ( normalizedDimension * 
             rotate( float2(normalizedX, 0), center, theta ) + 
             ( normalizedDimension / 2) );
}

[numthreads(16, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 newOffsets = worldspace(id.xy, float2(width, height));
    OutputTex[id.xy] = InputTex[newOffsets];
}
