#include "Assets/Scripts/TextureSynthesis/Resources/NodeShaders/HSV.compute"

#pragma kernel PatternKernel

#define PI 3.14159265f

RWTexture2D<float4> OutputTex;
Texture2D<float4> noiseTex;

uint width;
uint height;

float normalAngleOffset;
float noiseFactor;
SamplerState SmpPointClamp;
[numthreads(16, 16, 1)]
void PatternKernel(uint3 id : SV_DispatchThreadID)
{
    float turbulence = noiseFactor * ((noiseTex[id.xy].x -.5)/3);
    float2 centerPoint = float2(width / 2.0f, height / 2.0f);
    // Get angle based on position around circle
    float2 towardCenterVector = normalize(centerPoint - id.xy);
    // atan2 return is in [-pi, +pi], shift to [0,2pi] and normalize
    float theta = (atan2(towardCenterVector.y, towardCenterVector.x) + PI) / (2 * PI);
    float offsetAngle = (theta + normalAngleOffset + turbulence) % 1;

    // Get intensity based on distance from center
    float dist = distance(id.xy, centerPoint);
    float maxdist = distance(float2(0, 0), centerPoint);
    // Convert to fluid sim HSV encoding (hue = force angle, value = force magnitude)
    float3 color = HSVtoRGB(float3(offsetAngle, 1, 1-(dist / maxdist)));
    float4 rgba = float4(color.r, color.g, color.b, 1);
    OutputTex[id.xy] = rgba;
}