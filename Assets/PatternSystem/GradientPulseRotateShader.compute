// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> Result;
RWStructuredBuffer<float3> dataBuffer;
float timeSeconds;

float2 rotate(uint2 xy, float2 center, float theta)
{
    float r = distance(center, xy);
    float startAngle = atan2(xy.y - center.y, xy.x - center.x);
    float newX = center.x + r * cos(theta + startAngle);
    float newY = center.y + r * sin(theta + startAngle);
    return float2(newX, newY);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

    float2 center = float2(63, 63);
    float2 newpoint = rotate(id.xy, center, timeSeconds*2);

    float oscillator = (sin(timeSeconds / 4)/2)+0.5;
    //float oscillatorR = sin(timeSeconds) / 2 + 0.5;
    //float oscillatorG = sin(timeSeconds * .8) / 2 + 0.5;
    //float oscillatorB = sin(timeSeconds * .6) / 2 + 0.5;

    float4 color = float4(  abs((newpoint.x%16) / 16.0), 
                            oscillator, 
                            abs((newpoint.y%16) / 16.0), 
                            0.0);
    if (id.x < 75 && id.y < 96) {
        Result[id.xy] = color;
        dataBuffer[96*id.x+id.y] = color;
    }
    else {
        Result[id.xy] = float4(0, 0, 0, 0);
    }
}