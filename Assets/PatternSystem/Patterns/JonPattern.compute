// This is like declaring the "main" function of a C-family language, the thing that gets executed
#pragma kernel CSMain

// These are the pieces of data the GPU uses to communicate with the CPU
// "Result" is just an image file (a 2D array of float4s, which represent colors, eg <1,0,0,0> is red)
// "dataBuffer" is a 1D array of float3s, used to send the color values back in a format more usable by
// the rest of the code
// "timeSeconds" is the current time and passed in by the CPU so that eg sin() based oscillators will oscillate
// The rest are global parameters set in the manager which can affect things
RWTexture2D<float4> Frame;
RWStructuredBuffer<float3> dataBuffer;

float timeSeconds;
float hue;
float saturation;
float brightness;
float period;
float cycleCount;

//Color space functions taken from Ian Taylor's work at http://www.chilliant.com/rgb2hsv.html
float Epsilon = 1e-10;
float3 RGBtoHCV(in float3 RGB)
{
    // Based on work by Sam Hocevar and Emil Persson
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
    return float3(H, C, Q.x);
}

float3 HUEtoRGB(in float H)
{
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}

float3 HSVtoRGB(in float3 HSV)
{
    float3 RGB = HUEtoRGB(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

float3 RGBtoHSV(in float3 RGB)
{
    float3 HCV = RGBtoHCV(RGB);
    float S = HCV.y / (HCV.z + Epsilon);
    return float3(HCV.x, S, HCV.z);
}

//This function rotates a point (uint2 xy) theta degrees around a center point
float2 rotate(in uint2 xy, in float2 center, in float theta)
{
    float r = distance(center, xy);
    float startAngle = atan2(xy.y - center.y, xy.x - center.x);
    float newX = center.x + r * cos(theta + startAngle);
    float newY = center.y + r * sin(theta + startAngle);
    return float2(newX, newY);
}

//Transform a color into HSV space, apply global parameters to it
float3 applyHSVTransforms(in float3 color) {
    color = RGBtoHSV(color);
    return HSVtoRGB(float3((color.x + hue) % 1, (color.y*saturation), color.z*brightness));
}

// Color the "Frame" image and put it in the general dataBuffer
void returnColorData(in uint2 pixel, in float3 color) {
    color = applyHSVTransforms(color);
    Frame[pixel.xy] = float4(color, 1);
    dataBuffer[75 * pixel.y + pixel.x] = color;
}

//The 'numthreads' declaration determines how many threads are used on the GPU
// you pass in X/Y/Z values - this program will use 64 threads concurrently
// and each one will get an X/Y value representing a pixel in the output image that
// it works on ("uint3 id")
[numthreads(25, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float pi = 3.14159265f;
    float cycle = 75 / cycleCount;
    // We declare a center point of the 75x96 texture around which to rotate, and then
    // rotate our input point
    float2 center = float2(75/2.0, 48);
    float2 newpoint = rotate(id.xy, center, 2 * pi * timeSeconds / period);

    float oscillator = (sin(timeSeconds / 4)/2)+0.5;

    // Get a color based on slapping some functions together 
    float3 color = float3( 0, 
                           (newpoint.x%cycle * 2) / cycle,
                           (newpoint.y%cycle) / cycle);
    returnColorData(id.xy, color);
}