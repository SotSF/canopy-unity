// This is like declaring the "main" function of a C-family language, the thing that gets executed
#pragma kernel CSMain

// These are the pieces of data the GPU uses to communicate with the CPU
// "Result" is just an image file (a 2D array of float4s, which represent colors, eg <1,0,0,0> is red)
// "dataBuffer" is a 1D array of float3s, used to send the color values back in a format more usable by
// the rest of the code
// "timeSeconds" is the current time and passed in by the CPU so that eg sin() based oscillators will oscillate
RWTexture2D<float4> Frame;
RWStructuredBuffer<float3> dataBuffer;

float timeSeconds;
float brightness;
float period;
float cycleCount;

float rightStickX;
float rightStickY;
float leftStickX;
float leftStickY;

//This function rotates a point (uint2 xy) theta degrees around a center point
float2 rotate(uint2 xy, float2 center, float theta)
{
	float r = distance(center, xy);
	float startAngle = atan2(xy.y - center.y, xy.x - center.x);
	float newX = center.x + r * cos(theta + startAngle);
	float newY = center.y + r * sin(theta + startAngle);
	return float2(newX, newY);
}

//The 'numthreads' declaration determines how many threads are used on the GPU
// you pass in X/Y/Z values - this program will use 64 threads concurrently
// and each one will get an X/Y value representing a pixel in the output image that
// it works on ("uint3 id")
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// We declare a center point of the 75x96 texture around which to rotate, and then
	// rotate our input point
	float2 leftStickCenter = float2((75 / 2.0) + leftStickX * (75 / 2.0), (96 / 2.0) + leftStickY * (96 / 2.0));
	float leftStickDist = distance(leftStickCenter, id.xy);

	float2 rightStickCenter = float2((75 / 2.0) + rightStickX * (75 / 2.0), (96 / 2.0) + rightStickY * (96 / 2.0));
	float rightStickDist = distance(rightStickCenter, id.xy);

	float sizer = distance(float2(0, 0), float2(100, 100));

	// Get a color based on slapping some functions together 
	float4 color = float4(leftStickDist / sizer,
		rightStickDist / sizer,
		0,
		0.0);
	// Color the "Result" image and put it in the general dataBuffer
	Frame[id.xy] = brightness * color;
	dataBuffer[75 * id.y + id.x] = brightness * color.rgb;
}