#pragma kernel CSMain

Texture2D<float4> InputTex;
RWTexture2D<float4> Frame;
RWStructuredBuffer<float3> dataBuffer;

float timeSeconds;
float brightness;
float period;
float cycleCount;

float rightStickX;
float rightStickY;
float leftStickX;
float leftStickY;

float2 rotate(in float2 xy, in float2 center, in float theta)
{
    float r = distance(center, xy);
    float startAngle = atan2(xy.y - center.y, xy.x - center.x);
    float newX = center.x + r * cos(theta + startAngle);
    float newY = center.y + r * sin(theta + startAngle);
    return float2(newX, newY);
}

float2 worldspace(in uint2 pixel, in float width) {
    // go from pixelSpace to width-normalized world space
    float pi = 3.14159265;
    float2 center = float2(0, 0);
    float apexRadius = 0.332f;
    float stripLength = 2.5f;

    float normalizedX = ((stripLength*pixel.x / 75.0f) + apexRadius) / (stripLength + apexRadius);
    return (width*rotate(float2(normalizedX, 0), center, 2 * pi*(pixel.y / 96.0f)) / 2) + (width / 2);
}

[numthreads(25, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float2 newOffsets = float2(id.x + leftStickX * (75 / 2.0) + (128/2.0 -75/2.0), id.y + leftStickY * (96 / 2.0) + (128/2.0 - 96/2.0));
    newOffsets = worldspace(newOffsets, 128);
	float4 color = InputTex[newOffsets];

	// Color the "Result" image and put it in the general dataBuffer
	Frame[id.xy] = brightness * color;
	dataBuffer[75 * id.y + id.x] = brightness * color.rgb;
}