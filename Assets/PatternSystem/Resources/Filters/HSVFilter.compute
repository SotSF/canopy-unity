// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Assets/PatternSystem/Resources/Filters/FilterParams.compute"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> InputTex;
RWTexture2D<float4> OutputTex;
float4 HSV;

//Color space functions taken from Ian Taylor's work at http://www.chilliant.com/rgb2hsv.html
float Epsilon = 1e-10;
float3 RGBtoHCV(in float3 RGB)
{
	// Based on work by Sam Hocevar and Emil Persson
	float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
	float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
	float C = Q.x - min(Q.w, Q.y);
	float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
	return float3(H, C, Q.x);
}

float3 HUEtoRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

float3 HSVtoRGB(in float3 HSV)
{
	float3 RGB = HUEtoRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

float3 RGBtoHSV(in float3 RGB)
{
	float3 HCV = RGBtoHCV(RGB);
	float S = HCV.y / (HCV.z + Epsilon);
	return float3(HCV.x, S, HCV.z);
}

float3 applyHSVTransforms(in float3 color, float3 hsv) {
	color = RGBtoHSV(color);
	return HSVtoRGB(float3((color.x + hsv.x) % 1, (color.y*hsv.y), color.z*hsv.z));
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	OutputTex[id.xy] = float4(applyHSVTransforms(InputTex[id.xy].rgb, HSV.rgb), InputTex[id.xy].a);
}
